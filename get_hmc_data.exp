#!/usr/bin/expect -f

# atam84 on Github
# use expect to generate and get outputs files

## Access CLI
#####
set loginUser [lindex $argv 0]
set loginPassword [lindex $argv 1]
set mgmtServerAddress [lindex $argv 2]
set whatToDo [lindex $argv 3]
set managedSystem [lindex $argv 4]
#####

set LIST_maneged "-F name,ipaddr,state"

set LPAR_conf "-r lpar -F name,lpar_id,state,lpar_env,os_version,logical_serial_num,default_profile,curr_profile,work_group_id,shared_proc_pool_util_auth,allow_perf_collection,power_ctrl_lpar_ids,lpar_keylock,auto_start,redundant_err_path_reporting,rmc_state,rmc_ipaddr,lpar_avail_priority,desired_lpar_proc_compat_mode,curr_lpar_proc_compat_mode,affinity_group_id | sed -e 's/, ,/,,/g'"

set LPAR_mem_conf "-r mem --level lpar -F lpar_name,lpar_id,curr_min_mem,curr_mem,curr_max_mem,mem_mode"

set LPAR_proc_conf "-r proc --level lpar -F lpar_name,lpar_id,curr_min_proc_units,curr_proc_units,curr_max_proc_units,curr_min_procs,curr_procs,curr_max_procs,curr_sharing_mode,curr_uncap_weight,pend_shared_proc_pool_name,run_proc_units,run_procs,run_uncap_weight"

set LPAR_io_slot "-r io --rsubtype slot -F unit_phys_loc,lpar_id,drc_name,description  | egrep -v \"Universal Serial Bus|Generic XT-Compatable\" | sed -e 's/PCI Express Dual Port Fibre Channel Adapter/FC/g' -e 's/Ethernet-TX PCI-E Adapter/Ethernet/g' -e 's/PCI-E //g'"

set LPAR_hea "-r hea -F slot_enclosure,owner_lpar_id,slot_drc_name,description | sed 's/Logical HEA port configuration/HEA port/' | sort -n"


## Expect Parameters
set timeout 5
log_user 0

spawn ssh -l $loginUser $mgmtServerAddress
match_max 500000

proc exec_command {command managed params file_name} {
        #expect "*>" {
        #send -- "lssyscfg -r sys -F name state | grep Operating\r"
        send -- "$command $managed $params\r"
        #}
        # put result to a file, tmpfile_id is file ID
        expect "*>" {
                set output_f [open $file_name "w"]
                set output_data $expect_out(buffer)
                puts $output_f $output_data
                close $output_f
        }
        #return 0
}

expect {
        "yes/no" { send -- "yes\r" }
        "*assword*" { send -- "$loginPassword\r" }
}

#puts "loginUser ${loginUser}"
#puts "loginPassword ${loginPassword}"
#puts "mgmtServerAddress ${mgmtServerAddress}"
#puts "whatToDo ${whatToDo}"
#puts "managedSystem ${managedSystem}"

expect {
	"*Permission denied*" {
		puts "Login/Password error\n"
		#return  99
	}
	timeout {
		puts "Timeout: connexion lost\n"
		return 98
	}
	"*>" {
		puts "Connexion ok"
		if {$whatToDo == "get_servers"} {
			puts "\[Info\] Connexion to ${mgmtServerAddress}"
			set power_status [exec_command "lssyscfg -r " "sys" $LIST_maneged ".${mgmtServerAddress}_powerstatus.tmp"]
			#puts "0 _ power_status lssyscfg -r sys ${LIST_maneged} .${mgmtServerAddress}_power_status.tmp\n"
			return 10
		} else {
			puts "\[Info\] Geting list of LPARs Status"
			set lpar_status [exec_command "lssyscfg -m " $managedSystem $LPAR_conf ".${managedSystem}_lparstatus.tmp"]
			puts "\[Info\] Geting the memory configuration"
			set lpar_mem [exec_command "lshwres -m " $managedSystem $LPAR_mem_conf ".${managedSystem}_memory.tmp"]
			puts "\[Info\] Geting the processor configuration"
			set lpar_proc [exec_command "lshwres -m " $managedSystem $LPAR_proc_conf ".${managedSystem}_processors.tmp"]
			puts "\[Info\] Geting the io slots list"
			set lpar_io [exec_command "lshwres -m " $managedSystem $LPAR_io_slot ".${managedSystem}_ioslot.tmp"]	
			puts "\[Info\] Geting the hea interfaces affectation"
			set lpar_hea [exec_command "lsiotopo -m " $managedSystem $LPAR_hea ".${managedSystem}_hea.tmp"]

			##### Section for test only
			#puts "\[Info\] Geting list of LPARs Status"
			#puts "1 _ lpar_status lssyscfg -m ${managedSystem} ${LPAR_conf} .${mgmtServerAddress}_lpar_status.tmp\n"
			#puts "\[Info\] Geting the memory configuration"
			#puts "2 _ lpar_mem    lshwres -m ${managedSystem} ${LPAR_mem_conf} .${mgmtServerAddress}_memory.tmp\n"
			#puts "\[Info\] Geting the processor configuration"
			#puts "3 _ lpar_proc   lshwres -m ${managedSystem} ${LPAR_proc_conf} .${mgmtServerAddress}_processors.tmp\n"
			#puts "\[Info\] Geting the io slots list"
			#puts "4 _ lpar_proc   lshwres -m ${managedSystem} ${LPAR_io_slot} .${mgmtServerAddress}_io_slot.tmp\n"
			return 11
		}
	}
}

expect timeout {
        puts "Timeout: connexion lost\n"
        return 98
}

expect eof {
        send -- "exit\r"
}


